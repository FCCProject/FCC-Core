#pragma once

#include <stdint.h>

/* XXX: Comment out this line for a non-test network */
//#define MCC_TEST_NETWORK

#define MCC_TEST_NETWORK_VERSION                            84 // autogenerated

#define MCC_BLOCKCHAIN_DATABASE_VERSION                     uint64_t( 210 )

#define MCC_ADDRESS_PREFIX                                  "FCC"
#define MCC_BLOCKCHAIN_SYMBOL                               "FCC"
#define MCC_BLOCKCHAIN_NAME                                 "FCCShares"
#define MCC_BLOCKCHAIN_DESCRIPTION                          "Decentralized Exchange"
#define MCC_BLOCKCHAIN_PRECISION                            100000

#define MCC_BLOCKCHAIN_BLOCK_INTERVAL_SEC                   uint32_t( 10 )
#define MCC_BLOCKCHAIN_BLOCKS_PER_HOUR                      ( ( 60 * 60 ) / MCC_BLOCKCHAIN_BLOCK_INTERVAL_SEC )
#define MCC_BLOCKCHAIN_BLOCKS_PER_DAY                       ( 24 * MCC_BLOCKCHAIN_BLOCKS_PER_HOUR )
#define MCC_BLOCKCHAIN_BLOCKS_PER_YEAR                      ( 365 * MCC_BLOCKCHAIN_BLOCKS_PER_DAY )

#define MCC_BLOCKCHAIN_MAX_UNDO_HISTORY                     ( 3 * MCC_BLOCKCHAIN_BLOCKS_PER_HOUR )
#define MCC_BLOCKCHAIN_MAX_TRANSACTION_EXPIRATION_SEC       ( 2 * 24 * 60 * 60 )

#define MCC_BLOCKCHAIN_NUM_DELEGATES                        uint32_t( 25 )
#define MCC_BLOCKCHAIN_MAX_SLATE_SIZE                       ( MCC_BLOCKCHAIN_NUM_DELEGATES + ( MCC_BLOCKCHAIN_NUM_DELEGATES / 10 ) )

#define MCC_MAX_DELEGATE_PAY_PER_BLOCK                      int64_t( 50 * MCC_BLOCKCHAIN_PRECISION )

/**
 *  The maximum amount that can be issued for user assets.
 *
 *  10^18 / 2^63 < 1  however, to support representing all share values as a double in
 *  languages like java script, we must stay within the epsilon so
 *
 *  10^15 / 2^53 < 1 allows all values to be represented as a double or an int64
 */
#define MCC_BLOCKCHAIN_MAX_SHARES                           ( 1000 * 1000 * int64_t( 1000 ) * 1000 * int64_t( 1000 ) )

#define MCC_BLOCKCHAIN_MIN_NAME_SIZE                        1
#define MCC_BLOCKCHAIN_MAX_NAME_SIZE                        63

#define MCC_BLOCKCHAIN_MAX_SUB_SYMBOL_SIZE                  8  // characters
#define MCC_BLOCKCHAIN_MIN_SYMBOL_SIZE                      3  // characters
#define MCC_BLOCKCHAIN_MAX_SYMBOL_SIZE                      12 // characters

#define MCC_BLOCKCHAIN_MIN_BURN_FEE                         MCC_BLOCKCHAIN_PRECISION

#define MCC_BLOCKCHAIN_MAX_MEMO_SIZE                        19 // bytes
#define MCC_BLOCKCHAIN_EXTENDED_MEMO_SIZE                   32 // bytes
#define MCC_BLOCKCHAIN_MAX_EXTENDED_MEMO_SIZE               ( MCC_BLOCKCHAIN_MAX_MEMO_SIZE + MCC_BLOCKCHAIN_EXTENDED_MEMO_SIZE )

#ifdef MCC_TEST_NETWORK
#define MCC_BLOCKCHAIN_VOTE_UPDATE_PERIOD_SEC               10
#else
#define MCC_BLOCKCHAIN_VOTE_UPDATE_PERIOD_SEC               ( 60 * 60 ) // 1 hour
#endif

#define MCC_BLOCKCHAIN_MAX_UIA_MARKET_FEE_RATE              10000 // 100%

#define MCC_BLOCKCHAIN_MIN_FEEDS                            ( ( MCC_BLOCKCHAIN_NUM_DELEGATES / 2 ) + 1 )

#define MCC_BLOCKCHAIN_MAX_SHORT_APR_PCT                    uint64_t( 50 )

#ifdef MCC_TEST_NETWORK
#define MCC_BLOCKCHAIN_MAX_SHORT_PERIOD_SEC                 ( 2 * 60 * 60 ) // 2 hours
#else
#define MCC_BLOCKCHAIN_MAX_SHORT_PERIOD_SEC                 ( 30 * 24 * 60 * 60 ) // 1 month
#endif

#define MCC_BLOCKCHAIN_MCALL_D2C_NUMERATOR                  1
#define MCC_BLOCKCHAIN_MCALL_D2C_DENOMINATOR                2

#define MCC_BLOCKCHAIN_MIN_YIELD_PERIOD_SEC                 ( 24 * 60 * 60 ) // 24 hours
#define MCC_BLOCKCHAIN_MAX_YIELD_PERIOD_SEC                 ( 365 * MCC_BLOCKCHAIN_MIN_YIELD_PERIOD_SEC ) // 1 year

// TODO: This stuff only matters for propagation throttling; should go somewhere else
#define MCC_BLOCKCHAIN_DEFAULT_RELAY_FEE                    1  // XTS
#define MCC_BLOCKCHAIN_MAX_TRX_PER_SECOND                   1  // (10)
#define MCC_BLOCKCHAIN_MAX_PENDING_QUEUE_SIZE               10000 // (MCC_BLOCKCHAIN_MAX_TRX_PER_SECOND * MCC_BLOCKCHAIN_BLOCK_INTERVAL_SEC)
